// src/sw/main.ts
const {clients, addEventListener} = self;
let CACHE_NAME = "parcheesi-v0.3";
let urlsToCacheDuringInstall = [
  "/",
  "/bundle.js",
  "/manifest.json"
];
self.addEventListener("install", (event) => {
  event.waitUntil(caches.open(CACHE_NAME).then(function(cache) {
    return cache.addAll(urlsToCacheDuringInstall);
  }));
});
self.addEventListener("install", function(event) {
  event.waitUntil(Promise.all([
    self.skipWaiting()
  ]));
});
self.addEventListener("fetch", function(event) {
  let originalURL = event.request.url;
  let cacheURL = originalURL;
  if (/\?v\=[0-9]+$/.test(originalURL)) {
    cacheURL = originalURL.replace(/\?v\=[0-9]+/, "");
  }
  let supportsWebP = false;
  if (event.request.headers.has("accept")) {
    supportsWebP = event.request.headers.get("accept").includes("webp");
  }
  if (supportsWebP) {
    if (/\.jpg$|.png$/.test(cacheURL)) {
    }
  }
  if (event.request.headers.get("save-data")) {
    if (event.request.url.includes("fonts.gooleapis.com")) {
      event.respondWith(new Response("", {
        status: 417,
        statusText: "Ignore fonts to save data."
      }));
    }
  }
  event.respondWith(caches.match(cacheURL).then(function(response) {
    if (response) {
      return response;
    }
    let requestToCache = event.request.clone();
    return fetch(originalURL).then(function(response2) {
      if (!response2 || response2.status !== 200 || response2.type !== "basic") {
        return response2;
      }
      let responseToCache = response2.clone();
      caches.open(CACHE_NAME).then(function(cache) {
        cache.put(cacheURL, responseToCache);
      });
      return response2;
    });
  }));
});
self.addEventListener("activate", function(event) {
  let cacheWhitelist = [CACHE_NAME];
  event.waitUntil(Promise.all([
    caches.keys().then(function(allStoredCacheNames) {
      return Promise.all(allStoredCacheNames.filter(function(v) {
        return cacheWhitelist.indexOf(v) < 0;
      }).map(function(el) {
        return caches.delete(el);
      }));
    }),
    event.waitUntil(self.clients.claim())
  ]));
});
self.addEventListener("message", function(event) {
  if ("skipWaiting" in event.data) {
    self.skipWaiting();
  }
});
//# sourceMappingURL=data:application/json;base64,
